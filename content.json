{"pages":[],"posts":[{"title":"","text":"我的第一篇博客文章 文章目录….. 文章标题….. 参考文献www.javaeden.cn","link":"/2020/09/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"},{"title":"MySql常用语法","text":"DDL(数据库/表定义,操作数据库和表结构） 操作数据库创建数据库 create database 数据库名； 查看数据库的字符集 show create database 数据库名; 查看所有的数据库 show databases; 使用数据库 use 数据库名; 删除数据库 drop database 数据库名. 修改数据库字符集 alter database 数据名 character set 字符集; 操作数据表查看表结构/信息 desc 表名; show create table 表名; 查看当前数据库下的所有表 show tables; 查看表的字符集 show table status from 数据库 like “表名”; 创建表 create table 表名( ​ 字段/列名 数据类型 约束， ​ ….. ); 注意:每个字段间用”,”号分割，最后一个字段不需要 常用数据类型 类型 描述 double 类似java中的double int 类似java中的int date 格式:”yyyy-MM-dd” timestamp 时间戳。不给值或为null时采用系统日期时间。 datetime 格式:”yyyy-MM-dd HH:mm:ss” varchar(长度) 类似Java中的字符串,例:varchar(20) 修改表的字段类型 alter table 表名 modify 字段名 字段类型; 修改表名 alter table 旧表名 rename [to] 新表名; 修改表的字符集 alter table 表名 character set 字符集名称; 修改字段名和类型 alter table 表名 change 旧字段名 新字段名 数据类型 ; 添加字段(默认添加到末尾) alter table 表名 add 字段名 字段类型; 添加首字段 alter table 表名 add 字段名 字段类型 first; 在指定字段后添加新字段 alter table 表名 add 新字段名 新字段类型 after 指定字段; 删除字段 alter table 表名 drop 字段名; 删除表 drop table [if exists] 表名; DML(表记录增删改) 添加表数据添加全部列数据 insert into 表名 values(值1,……..); 添加指定列数据 insert into 表名(字段列表) values(值列表); 批量添加指定列数据 insert into 表名(字段列表) values(值列表)，(值列表)…; 批量添加全部列数据 insert into 表名 values(值列表),(值列表)…..; 修改&amp;删除表数据根据条件删除表数据 delete from 表名 where 条件; 根据条件更新表数据 update 表名 set 字段名 = 值1,字段名2 = 值2….. where 条件; 注意:一定要加条件进行修改和删除，否则表中的记录会整体受影响 DQL查询全部 select * from 表名; 查询指定列数据 select 字段列表 from 表名; 起别名查询 select 字段名 [ as] 别名 from 表名; ifnull函数查询 select ifnull(字段名,值) from 表名; 四则运算查询 select 操作数1 运算符 操作数2 from 表名 去重查询 select distinct 字段名 from 表名 条件查询 select ​ 字段列表 from ​ 表列表 where 条件 group by 字段 having 条件 limit 操作数 | 操作数,操作数 聚合函数 sum() count() max() min() avg() 语法:select 函数名(字段) from 表名; 排序查询语法 select 字段列表 from 表名 order by 字段名 asc | desc; 分组查询语法 select 字段列表 from 表名 group by 字段名 having 条件 分页查询语法 select 字段列表 from 表名 limit 当前页数,查看的记录数; 当前 页数 = （要查看的页数-1）* 查看的记录数 约束 主键约束特点1、主键在一张表中只有一个 2、非空且唯一 添加建表时 create table 表名( ​ 列名 数据类型 primary key， ​ ……. ); 建表后 alter table 表名 modify 字段名 数据类型 primary key; 删除 alter table 表名 drop primary key; 主键自增约束特点通常都是给id设置自动增长，在添加数据的时候直接赋值为null或者default会自动赋值，自动增长的列只能是整数 添加建表时 create table 表名( ​ 字段名 字段类型 primary key auto_increment ​ …… ); 建表后 alter table 表名 modify 字段名 字段类型 auto_increment; 删除 alter table 表名 midfy 字段名 字段类型; 修改自动增长起始值 alter table 表名 auto_increment = 值; 唯一约束添加建表时 create table 表名( ​ 字段名 字段类型 unique, ​ ….. ); 建表后 alter table 表名 modify 字段名 数据类型 unique; 删除 alter table 表名 drop index 字段名; 非空约束添加建表时 create table 表名( ​ 字段名 数据类型 not null, ​ ……. ); 建表后 alter table 表名 modify 字段 字段类型 not null; 删除 alter table 表名 modify 字段 字段类型; 外键约束建立了表与表之间的关联关系。保证了数据的准确性。 添加建表时 create table 表名( ​ 外键列名 外键列类型, ​ constraint 外键名 foreign key (本表外键列名) references 主表表名(主键) ); 建表后 alter table 表名 add constraint 外键名 foreign key(本表外键列名) references 主表表名(主键); 删除 alter table 表名 drop foreign key 外键名; 外键级联更新/删除 删除外键后级联也会随之删除 查看外键名称 show create table 表名; 添加级联更新 alter table 表名 add constraint 外键名 foreign key (本表外键列名) references 主表表名(主键) on update cascade; 添加级联删除 alter table 表名 add constraint 外键名 foreign key (本表外键列名) references 主表表名(主键) on delete cascade; 同时添加 alter table 表名 add constraint 外键名 foreign key (本表外键列名) references 主表表名(主键) on delete cascade on update cascade; 表关系一对一一对多建表原则多的一方添加外键列，建立外键约束，关联一的主键 例如：订单表和用户表、商品分类表和商品表等 多对多建表原则两张表间接建立了多对多的关系，需要创建第三张表，第三张表中关联另外两张表的id 例：用户表和商品表 创建表应该先创建主表，然后在接着创建从表 多表查询内连接查询查询的是两张表外键关联的交集数据 隐式内连接 select 字段列表 from 表1,表2 where 条件 显式内连接 select 字段列表 from 表1 inner join 表2 on/where 条件 外连接查询左外连接查询的是左表全部数据以及左右表的交集数据 select 字段列表 from 表1 left join 表2 on 条件 右外连接查询的是右表全部数据以及左右表的交集数据 select 字段列表 from 表1 right join 表2 on 条件 子查询结果是单行单列作为运算符的条件.比如&lt;、&lt;=、&gt;=、&gt; 、&lt;&gt;等 select 字段列表 from 表名 where 字段名 = (select 字段名 from 表名 [ where 条件]) [where 条件]; 结果是多行单列作为in || not in 的条件 select 字段列表 from 表名 where 字段名 not in (select 字段名 from 表名 [where 条件]) [where 条件]; 结果是多行多列 select 字段列表 from (select 字段列表 from 字段值 [where 条件]) as 别名 [where 条件]; 自关联查询自己查询自己。将自己进行拆分. 比如 ：员工和上级 select * from employee e1 ,employee e2 where e1.mgr = e2.id; 视图将一条较为复杂的查询语句的结果数据保存到视图中，下次还要使用到这个数据，直接查询视图即可，不用再次使用复杂的查询语句 创建视图 create view 视图名称 as 查询语句 ; 查询视图 select * from 视图名称; 修改视图数据 update 视图名称 set 字段名 = 字段值 ,…. where 条件; 修改视图结构命令 alter view 视图名称(字段列表) as 查询语句; 图形化界面 删除视图命令 drop view 视图名称； 图形化界面 注意:操作视图和操作表大同小异 备份和恢复数据库命令方式备份 恢复1、登录数据库 2、删除旧的数据库 3、创建新的数据库 4、使用数据库 5、使用source命令 6、查看是否成功 图形化界面方式备份 恢复1、先删除 2、再创建 3、运行SQL文件即可 存储过程=存储函数=Java中的方法创建1234567delimiter $create procedure 存储过程名([形参])begin -- 方法体 sql语句;end$delimiter ; 存储过程名命令规范:p_功能名 调用1、call 存储名([实参]) 2、call 存储名 3、call 存储名([select语句]) 删除1drop procedure 存储过程名; 查看12-- 查看数据库下面的所有的存储过程select * from mysql.proc where db=&quot;数据库名&quot;; 语法变量定义1declare 变量名 数据类型 [default 值]; 注意:变量只能定义在set之前，不能定义在set后面 1234-- 错误写法declare name varchar(20);set name = &quot;张三&quot;;declare age int; -- 变量只能定义在set语句前面，不能定义在这里 批量定义同类型变量12declare 变量名1,变量名2,变量名3... 数据类型-- 比如 :select address ,name varchar(20) 在Java中也是可以批量定义变量的，比如:String name,address; 赋值(3种方式)1、使用set关键字 1set 变量名 = 值; 2、定义变量并赋值 1declare 变量名 数据类型 default 默认值; 3、将select查询语句的结果赋值给变量 1select 字段名 into 变量名 from 表名 [where 条件]; 注意:mysql中没有扩展赋值运算符&amp;自增自减运算符 变量输出/使用12select 变量名列表;-- 比如 : select 变量名1,变量名2....; If语句单分支123if 条件1 then 条件1成立要执行的代码....end if; 多分支123456789if 条件1 then 条件1成立要执行的代码elseif 条件2 条件2成立要执行的代码.....else 以上条件都不成立要执行的代码-- 结束if语句end if; while语句123456初始化语句;while 循环条件 do 循环体代码... 步长/循环条件控制语句..(比如 set num = num + 1;)-- 结束while循环 end while; 建议：不管是if语句还是while语句，先搭建架子，后写逻辑代码 参数传递1、in ： 默认，表示输入参数，类似Java中方法的形参 示例: 12345-- 略...创建存储过程-- 声明p_demo(in name varchar(20))-- 调用call p_demo(&quot;张三&quot;); 2、out: 表示输出参数，可理解为Java中方法的返回值 123456-- 声明p_demo(out info varchar(20))-- 调用call p_Demo(@info) -- @info 就相当于一个会话变量，用来接收out类型的返回值-- 使用/输出select @info; 存储函数创建12345678delimiter $create function 函数名称([形参])returns 返回值类型begin sql语句; return 值;(值要和类型匹配)end$delimiter ; 函数名命名规范:f_功能名 调用1select 函数名称([实参列表]); -- 类似Java中的，System.out.println(getSum()); 删除1drop function 函数名; 存储过程和存储函数的区别？答：存储过程返回值可有可无，存储函数必须有返回值 Trigger触发器分类1、Insert型触发器 2、Update型触发器3、Delete型触发器 作用1、做数据校验 2、对表数据进行cru时进行日志记录 3、可模拟实现外键的级联删除和更新 创建123456789delimiter $create trigger 触发器名字before|after insert|update|deleteon 表名 -- 对该表名执行cru命令之前或者之后时，会自动触发下面的代码执行for each rowbegin 触发器要执行的代码end$delimiter ; 触发器命名规范：t_表名1__表名2 关键字/对象1、old :表示获取操作操作前/旧的数据,比如:old.id 2、new:表示获取操作后/新的数据,比如:new.name 注意：立场应该放在触发器要执行的代码&amp;执行表名相关代码的立场考虑 查看12-- 查看当前数据库下所有的触发器show triggers; 删除触发器1drop trigger 触发器名; 事务概念一条或多条sql语句组成的一个执行单元，要么同时成功，要么同时失败 特性(ACID)1、原子性:不可分割，要么同时成功，要么同时失败 2、隔离性 3、持久性 4、一致性 隔离级别1、读已提交 2、读未提交 3、可重复读（Mysql默认） 4、串行化 提交方式1、手动提交 2、自动提交（mysql默认） 查看提交方式1select @@AutoCommit; 修改提交方式1set @@Autocommit = 0 | 1; -- 0 表示手动提交 1 表示自动提交 常用操作1、开启事务 1start transaction; 2、提交事务 1commit; 3、回滚事务 1rollback; Mysql中常用函数1、now() :获取当前时间，年月日时分秒 2、crudate() ：获取日志, 年月日 3、concat() ： 用来拼接字符串，比如concat(a,b) ，结果ab,一定要注意拼接的格式 4、substring() ： 用来截取字符串 5、TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)计算两个时间差,还有datediff() 示例: select TIMESTAMPDIFF(year,19920202,CURDATE())","link":"/2020/09/02/Mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"}],"tags":[{"name":"Mysql常用","slug":"Mysql常用","link":"/tags/Mysql%E5%B8%B8%E7%94%A8/"}],"categories":[{"name":"Mysql","slug":"Mysql","link":"/categories/Mysql/"}]}